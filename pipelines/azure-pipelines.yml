# ASP.NET Core
# Build and test ASP.NET Core projects targeting .NET Core.
# Add steps that run tests, create a NuGet package, deploy, and more:
# https://docs.microsoft.com/azure/devops/pipelines/languages/dotnet-core

trigger:
- master

variables:
  buildConfiguration: 'Release'
  spaName: samplespa
  appName: sampleapp
  azureServiceEndpoint: 'Nebbia - Partner Network(1979771a-9163-4750-8947-e6dbe596a8d7)'

stages: 
- stage: stage_build
  displayName: "Build"
  jobs: 
  - job: job_build_all
    displayName: "Build MVC & SPA"
    pool: 
      vmImage: 'ubuntu-latest'
    steps:
    - script: dotnet build --configuration $(buildConfiguration) -o $(Agent.TempDirectory)/mvc
      displayName: 'dotnet build $(buildConfiguration)'
      workingDirectory: ./mvc
    - script: |
        echo 'Zipping up the mvc outputs to the staging directory'
        mkdir -p $(Build.ArtifactStagingDirectory)/mvc
        zip -r $(Build.ArtifactStagingDirectory)/mvc/mvc.zip mvc/
      workingDirectory: $(Agent.TempDirectory)
    - script: |
        echo "installing NPM packages and building"
        npm install
        npm run build

        cd build 
        echo "creating the spa folder on artifacts staging directory"
        mkdir -p $(Build.ArtifactStagingDirectory)/spa
        echo "copying files to artifacts staging directory"
        cp -vR * $(Build.ArtifactStagingDirectory)/spa
      displayName: 'npm run build'
      workingDirectory: ./spa/$(spaName)
    - script: cp -vR ./arm $(Build.ArtifactStagingDirectory)/arm
      displayName: "Copying arm templates to artifacts staging directory"
    - task: PublishBuildArtifacts@1
      inputs:
        PathtoPublish: '$(Build.ArtifactStagingDirectory)'
        ArtifactName: 'drop'
        publishLocation: 'Container'
    
- stage: stage_deploy_dev
  displayName: "Development"
  dependsOn: stage_build
  variables:
    environment: dev
    azureServiceEndpoint: 'Nebbia - Partner Network(1979771a-9163-4750-8947-e6dbe596a8d7)'
    resourceGroup: rg-$(appName)-$(environment)-001
  jobs: 
  - job: job_deploy_azure
    displayName: "Deploy to CDN"
    pool:
      vmImage: 'windows-latest'
    steps: 
    - download: current
      artifact: drop
    - task: AzureResourceGroupDeployment@2
      displayName: Deploy ARM Template to Create CDN
      inputs:
        azureSubscription: $(azureServiceEndpoint)
        action: 'Create Or Update Resource Group'
        resourceGroupName: $(resourceGroup)
        location: 'East US'
        templateLocation: 'Linked artifact'
        csmFile: '$(Pipeline.Workspace)/drop/arm/cdn-blob.json'
        overrideParameters: '-environment $(environment) -appName $(spaName)'
        deploymentMode: 'Incremental'
        deploymentOutputs: 'ArmOutputAsString'
    - powershell: |
        function Convert-ArmOutputToPsObject {
          param (
            [Parameter(Mandatory=$true)]
            [string]
            $ArmOutputString
          )

          if ($PSBoundParameters['Verbose']) {
            Write-Host "Arm output json is:"
            Write-Host $ArmOutputString
          }

          $armOutputObj = $ArmOutputString | ConvertFrom-Json

          $armOutputObj.PSObject.Properties | ForEach-Object {
              $type = ($_.value.type).ToLower()
              $keyname = "ArmOutputs.$($_.name)"
              $value = $_.value.value

              if ($type -eq "securestring") {
                  Write-Host "##vso[task.setvariable variable=$keyname;issecret=true]$value"
                  Write-Host "Added Azure DevOps secret variable '$keyname' ('$type')"
              } elseif ($type -eq "string") {
                  Write-Host "##vso[task.setvariable variable=$keyname]$value"
                  Write-Host "Added Azure DevOps variable '$keyname' ('$type') with value '$value'"
              } else {
                  Throw "Type '$type' is not supported for '$keyname'"
              }
          }
        }

        Convert-ArmOutputToPsObject -ArmOutputString '$(ArmOutputAsString)' -Verbose
      displayName: "Parsing outputs from ARM deployment to pipeline variables"
    - task: AzureFileCopy@2
      displayName: 'AzureBlob File Copy'
      inputs:
        sourcePath: '$(Pipeline.Workspace)/drop/spa'
        azureSubscription: $(azureServiceEndpoint)
        destination: AzureBlob
        storage: $(ArmOutputs.storageAccountName)
        containerName: '$(spaName)'
    - task: fabienlavocat.FabienLavocat-PurgeAzureCDNEndpoint.PurgeAzureCDNEndpoint.PurgeAzureCDNEndpoint@2
      displayName: 'Purge Azure CDN Endpoint'
      inputs:
        connectedServiceNameSelector: ConnectedServiceNameARM
        connectedServiceNameARM: $(azureServiceEndpoint)
        resourceGroupName: $(resourceGroup)
        endpointName: $(ArmOutputs.endpointName)
        profileName: $(ArmOutputs.profileName)
        purgeContent: /

  - job: deploy_webapp
    dependsOn: job_deploy_azure
    displayName: "Deploy to Webapp"
    pool:
      vmImage: 'windows-latest'
    steps: 
    - download: current
      artifact: drop
    - task: AzureResourceGroupDeployment@2
      displayName: Deploy ARM Template to Create CDN
      inputs:
        azureSubscription: $(azureServiceEndpoint)
        action: 'Create Or Update Resource Group'
        resourceGroupName: $(resourceGroup)
        location: 'East US'
        templateLocation: 'Linked artifact'
        csmFile: '$(Pipeline.Workspace)/drop/arm/webapp.json'
        overrideParameters: '-environment $(environment) -appName $(appName)'
        deploymentMode: 'Incremental'
        deploymentOutputs: 'ArmOutputAsString'
    - powershell: |
        function Convert-ArmOutputToPsObject {
          param (
            [Parameter(Mandatory=$true)]
            [string]
            $ArmOutputString
          )

          if ($PSBoundParameters['Verbose']) {
            Write-Host "Arm output json is:"
            Write-Host $ArmOutputString
          }

          $armOutputObj = $ArmOutputString | ConvertFrom-Json

          $armOutputObj.PSObject.Properties | ForEach-Object {
              $type = ($_.value.type).ToLower()
              $keyname = "ArmOutputs.$($_.name)"
              $value = $_.value.value

              if ($type -eq "securestring") {
                  Write-Host "##vso[task.setvariable variable=$keyname;issecret=true]$value"
                  Write-Host "Added Azure DevOps secret variable '$keyname' ('$type')"
              } elseif ($type -eq "string") {
                  Write-Host "##vso[task.setvariable variable=$keyname]$value"
                  Write-Host "Added Azure DevOps variable '$keyname' ('$type') with value '$value'"
              } else {
                  Throw "Type '$type' is not supported for '$keyname'"
              }
          }
        }

        Convert-ArmOutputToPsObject -ArmOutputString '$(ArmOutputAsString)' -Verbose
      displayName: "Parsing outputs from ARM deployment to pipeline variables"
    - task: AzureWebApp@1
      displayName: Deploy to Azure Web App (Windows)
      inputs:
        azureSubscription: $(azureServiceEndpoint)
        appType: 'webApp'
        appName: '$(ArmOutputs.webAppName)'
        package: '$(Pipeline.Workspace)/drop/mvc/*.zip'
        appSettings: '-AppSettingKey AppSettingValue'
        deploymentMethod: 'auto'
